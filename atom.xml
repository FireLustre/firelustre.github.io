<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lustre个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-25T15:51:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>firelustre</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP数组的实现</title>
    <link href="http://yoursite.com/2019/07/20/PHP%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/20/PHP数组的实现/</id>
    <published>2019-07-20T14:59:01.000Z</published>
    <updated>2019-07-25T15:51:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写go的时候，只站在对程序员友好的角度，我们会吐槽go数组、切片是多么的难用，PHP数组是多么的强大，不愧是“最好”的语言。然后仔细想想PHP数组为何如此便捷、强大呢？于是通过查找资料与消化，整理出了一些内容。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>不需要代码去指定需要分配的内存，自动分配2的幂次方</li><li>不会像go、c语言在数组的使用中出现越界的情况</li><li>同时支持索引数组和关联数组，即key值既可以为整数类型也可以为字符串类型</li><li>支持泛型value</li><li>正确使用的情况下查找元素的时间复杂度为O(1)</li><li>元素有序，插入的顺序和遍历的顺序一致</li></ul><h2 id="底层是如何实现的"><a href="#底层是如何实现的" class="headerlink" title="底层是如何实现的"></a>底层是如何实现的</h2><p>PHP数组底层最核心的数据结构就是<code>Hashtable</code>和<code>链表</code>。</p><p>当我们定义一个<code>key-value</code>的数组时，在php底层，会见将<code>key</code>通过<code>time33</code>算法转换为一个<code>整形数字</code>，然后将这个<code>整形数字</code>再次经过散列计算，计算得到的结果作为<code>Hashtable</code>中的一个下标，最终将Bucket的下标存在<code>Hashtable</code>的value中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$foo = [<span class="string">"key1"</span> =&gt; <span class="string">"value1"</span>, <span class="string">"key2"</span> =&gt; <span class="string">"value2"</span>];</span><br></pre></td></tr></table></figure><p><img src="/images/php_array.jpg" alt="PHP7.0数组实现"></p><blockquote><p>Hashtable是无序的， Bucket是有序的，PHP7.1后将Hashtable和Bucket统一在了arData里面</p></blockquote><h2 id="读取元素"><a href="#读取元素" class="headerlink" title="读取元素"></a>读取元素</h2><h3 id="随机读取"><a href="#随机读取" class="headerlink" title="随机读取"></a>随机读取</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> $foo[<span class="string">"key1"</span>];</span><br></pre></td></tr></table></figure><p>通过 Key 访问数组时，只需要使用相同的算法计算出对应下标，然后取出对应元素中的 Value 值，即可实现<strong>随机读取</strong>。</p><h3 id="顺序读取"><a href="#顺序读取" class="headerlink" title="顺序读取"></a>顺序读取</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span>($foo <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">  <span class="keyword">echo</span> $k . <span class="string">":"</span> . $v . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result =</span></span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line"><span class="comment">// key1:value1</span></span><br><span class="line"><span class="comment">// key2:value2</span></span><br><span class="line"><span class="comment">// ---------</span></span><br></pre></td></tr></table></figure><p>PHP数组进行for循环时，数组是有序的，从上图可以看出，我们只要循环遍历<code>Bucket</code>就可以顺序输出。</p><h3 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h3><p>新增元素和前面的元素初始化类似，但是值得注意的是，当新增元素后，发现当前arData已经满了的时候，PHP底层会申请新内存(初始大小位2，以2的倍数不断扩充)，把所有数据以内存的形式copy过去，然后扫描数组，把无用的数据移动到后面。采用移动的原因是因为删除元素的次数毕竟很少。</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">unset</span>($foo[<span class="string">"key1"</span>]);</span><br></pre></td></tr></table></figure><p>PHP中删除元素不是直接回收空间，因为直接回收空间会严重的导致内存碎片化，降低内存的使用率。</p><p>删除分为以下两步：</p><ul><li>将key1的bucket内容清空，不回收</li><li>将pListHead指向key2</li></ul><h2 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h2><p>任何散列函数都会出现哈希冲突的问题，常见的解决哈希冲突的方法有以下几种（不全面）：</p><ul><li>链地址法</li><li>重哈希法</li></ul><p>PHP中采用的是<code>链地址法</code>。发生冲突时，新元素的插入分为以下两步：</p><ul><li>新元素的next指向老元素</li><li>Hashtable的中将老元素的下标更新为新元素的下标</li></ul><p>所以<code>Hashtable</code>指向的就不是单个元素，而是元素组成的Bucket链表。在查找元素时，先找到对应的链表，然后遍历链表，匹配key后，才能找到目标元素。</p><p>不难发现在理想情况下，PHP的时间复杂度为O(1)。当key使用time33算法产生冲突时，这时候的时间复杂度就达到了O(n*(1+n)/2)=O(n^2)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写go的时候，只站在对程序员友好的角度，我们会吐槽go数组、切片是多么的难用，PHP数组是多么的强大，不愧是“最好”的语言。然后仔细想想PHP数组为何如此便捷、强大呢？于是通过查找资料与消化，整理出了一些内容。&lt;/p&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; 
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>mac基于docker搭建php website</title>
    <link href="http://yoursite.com/2019/07/17/mac%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAphp-website/"/>
    <id>http://yoursite.com/2019/07/17/mac基于docker搭建php-website/</id>
    <published>2019-07-17T14:38:00.000Z</published>
    <updated>2019-07-17T14:42:25.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><h2 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h2 id="编排容器"><a href="#编排容器" class="headerlink" title="编排容器"></a>编排容器</h2><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;h2 id=&quot;安装docker-compose&quot;&gt;&lt;a href=&quot;#安装docker-comp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见web安全的攻击与防御</title>
    <link href="http://yoursite.com/2019/07/17/%E5%B8%B8%E8%A7%81web%E5%AE%89%E5%85%A8%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>http://yoursite.com/2019/07/17/常见web安全的攻击与防御/</id>
    <published>2019-07-17T14:27:59.000Z</published>
    <updated>2019-07-17T14:27:37.665Z</updated>
    
    <content type="html"><![CDATA[<p>在开放的互联网环境下，总有一些非法的用户想要攻击你的web站点，所以在这里记录一些和web安全相关的总结。</p><blockquote><p>文章中所有的列子都以PHP语言为例。</p></blockquote><h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><p>XSS攻击——跨站脚本攻击。一般是攻击者将恶意的代码写入到页面中，当正常用户访问网页时，会触发这些恶意注入的代码。</p><p>造成的后果：</p><ul><li>网页展示异常，网页展示的是攻击者串改过的非正常页面。</li><li>攻击者利用普通用户的登录状态，进行一些非法操作，比如把你自己的文章全删了。</li><li>盗用cookie信息，进行一些风险性的操作。</li></ul><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>反射型XSS，一般出现在url地址中。需要用户访问携带了恶意代码的地址才可以触发，且只会触发一次。一般出现在网站的搜索功能中。</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>反射型XSS，也叫“持久型”XSS攻击，恶意代码通过表单提交的方式，存储在站点的服务器当中，当正常用户访问页面时，就会触发。一般出现在评论、文章发布等。</p><h3 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h3><p>XSS主要通过注入html、JavaScript代码等方法。所以可以采用过滤标签和转义特殊字符的方法。</p><ul><li><p>标签过滤，标签过滤可以使用一些正则表达式，过滤掉如<code>script</code>、<code>onclick</code>等标签，这样注入的代码将无法正常执行。</p></li><li><p>转义特殊字符，在这个一切以用户体验为主的时代，这个方法相对于标签过滤来说，无疑是更好的。它只是将特殊字符转换为 HTML 实体，在页面显示的时候，不会过滤掉用户发布的任何信息。在PHP中提供了<a href="https://www.php.net/manual/zh/function.htmlspecialchars.php" target="_blank" rel="noopener">htmlspecialchars</a>这个方法。</p></li></ul><h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2><p>CSRF攻击——跨站请求伪造。顾名思义就是攻击者伪装成被攻击者（以被攻击者的身份）进行一些操作。</p><blockquote><p>说CSRF之前就要先说一下浏览器的同源策略。那什么是同源策略？</p><p>同源策略是指在同一种、同一域名及同一端口下才可以共享cookie等数据。</p></blockquote><p>CSRF攻击通过绕过同源策略的安全机制，来利用被攻击者在某个网页登录的信息来进行一些恶意的攻击。比如小白用户A登录了某xx银行，此时A打开了攻击者B发布的一个链接<code>http://test.foo.com/</code>，A认为这是一个安全链接，于是就访问了这个恶意的链接；在这个恶意的链接所对应的网站下，其实嵌套了一个转账行为；于是A莫名奇妙的少了1块钱。</p><h3 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h3><p>通过上面的列子，我们知道了这种攻击是通过第三方网站请求我们的服务（第三方网站利用了我们的用户登录信息）导致的。一般的防御方法有：</p><ul><li>判断<strong>请求头</strong>中的<code>referer</code>信息，来判断是否是自己的网站发起的请求。</li><li>对于一些表单提交的POST请求，可以颁发临时token，这样一来，根据者所提交的表单我们就可以根据这个token来判断是无效的。</li></ul><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>sql注入的问题，应该是服务端编写代码不严谨才会导致的问题。常见的sql注入有很多种，这里写几个有代表性的。</p><p>举个常见的后台身份绕过漏洞的列子，当我们要登录一个网站时，我们输入的密码为“123456’ or  1 = 1 –”。</p><p>那通过表单的提交，后端sql的组装，传递到mysql就是这样一句sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username = <span class="string">'lustre'</span> <span class="keyword">and</span> pwd = <span class="string">'123456'</span> <span class="keyword">or</span>  <span class="number">1</span> = <span class="number">1</span> <span class="comment">-- '</span></span><br></pre></td></tr></table></figure><p>这就是<code>or</code>大法，成功绕过了密码校验。</p><p>针对上面的这种情况，一方面我们可以将用户的参数进行过滤或者转义，另一方面可以使用PDO占位符进行处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=localhost; dbname=demo"</span>, <span class="string">"user"</span>, <span class="string">"pass"</span>);</span><br><span class="line">$pdo-&gt;exec(<span class="string">"set names 'utf8'"</span>);</span><br><span class="line">$sql=<span class="string">"select * from user where username = ? and pwd = ?"</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$exeres = $stmt-&gt;execute(<span class="keyword">array</span>($testname, $pass));</span><br></pre></td></tr></table></figure><p>上面的示例代码就可以防范sql注入，因为执行<code>prepare</code>方法时，查询的语句已经传递给了mysql，php程序没有提交任何参数，当执行<code>execute</code>方法时，参数才被传递过去。</p><p>关于sql注入，这里只是冰山一角，目前掌握的也不多，只能说到这里了，呃……</p><h2 id="DDoS攻击"><a href="#DDoS攻击" class="headerlink" title="DDoS攻击"></a>DDoS攻击</h2><p>DDos攻击——分布式拒绝服务<strong>攻击</strong></p><p>这个解释感觉不好理解，其实就是攻击者利用很多“肉鸡”去攻击某个站点。当然这些“肉鸡”可能也是受害者。比如攻击者先用XSS攻击手段去攻击了一个流量很大的网站，然后让这些用户又去被动访问攻击的目标站点，导致短时间内站点流量剧增，影响正常用户访问。</p><p><a href="https://www.zhihu.com/question/22259175" target="_blank" rel="noopener">知乎</a>上举了个列子，我觉得很形象。</p><blockquote><p>我开了一家有五十个座位的重庆火锅店，由于用料上等，童叟无欺。平时门庭若市，生意特别红火，而对面二狗家的火锅店却无人问津。二狗为了对付我，想了一个办法，叫了五十个人来我的火锅店坐着却不点菜，让别的客人无法吃饭。</p></blockquote><h3 id="如何应对-DDoS-攻击？"><a href="#如何应对-DDoS-攻击？" class="headerlink" title="如何应对 DDoS 攻击？"></a>如何应对 DDoS 攻击？</h3><ul><li><p>上高防</p></li><li><p>黑名单</p></li><li><p>DDoS 清洗</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开放的互联网环境下，总有一些非法的用户想要攻击你的web站点，所以在这里记录一些和web安全相关的总结。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章中所有的列子都以PHP语言为例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;XSS攻击&quot;&gt;&lt;a href=&quot;#X
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>老生常谈的tcp四次挥手</title>
    <link href="http://yoursite.com/2019/07/15/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88%E7%9A%84tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2019/07/15/老生常谈的tcp四次挥手/</id>
    <published>2019-07-15T15:08:52.000Z</published>
    <updated>2019-07-15T15:08:52.392Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Golang服务如何后台运行与平滑重启</title>
    <link href="http://yoursite.com/2019/07/15/Golang%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%B8%8E%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF/"/>
    <id>http://yoursite.com/2019/07/15/Golang服务如何后台运行与平滑重启/</id>
    <published>2019-07-15T15:05:56.000Z</published>
    <updated>2019-07-15T15:05:56.220Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis在分布式架构中数据一致性问题</title>
    <link href="http://yoursite.com/2019/07/15/Redis%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/15/Redis在分布式架构中数据一致性问题/</id>
    <published>2019-07-15T15:05:22.000Z</published>
    <updated>2019-07-15T15:05:22.078Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis在高并发中的应用</title>
    <link href="http://yoursite.com/2019/07/15/Redis%E5%9C%A8%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/15/Redis在高并发中的应用/</id>
    <published>2019-07-15T15:03:53.000Z</published>
    <updated>2019-07-25T15:53:31.042Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL explain地使用</title>
    <link href="http://yoursite.com/2019/07/15/MySQL-explain%E5%9C%B0%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/15/MySQL-explain地使用/</id>
    <published>2019-07-15T15:02:36.000Z</published>
    <updated>2019-07-15T15:02:36.950Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL的联合索引</title>
    <link href="http://yoursite.com/2019/07/15/MySQL%E7%9A%84%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2019/07/15/MySQL的联合索引/</id>
    <published>2019-07-15T15:00:24.000Z</published>
    <updated>2019-07-15T15:00:24.619Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL的索引</title>
    <link href="http://yoursite.com/2019/07/15/MySQL%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2019/07/15/MySQL的索引/</id>
    <published>2019-07-15T15:00:16.000Z</published>
    <updated>2019-07-15T15:00:16.087Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL引擎</title>
    <link href="http://yoursite.com/2019/07/15/MySQL%E5%BC%95%E6%93%8E/"/>
    <id>http://yoursite.com/2019/07/15/MySQL引擎/</id>
    <published>2019-07-15T14:59:43.000Z</published>
    <updated>2019-07-15T14:59:43.554Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识nsq</title>
    <link href="http://yoursite.com/2019/07/15/%E5%88%9D%E8%AF%86nsq/"/>
    <id>http://yoursite.com/2019/07/15/初识nsq/</id>
    <published>2019-07-15T14:58:07.000Z</published>
    <updated>2019-07-15T14:58:07.573Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>聊一聊CGI、FastCGI及FPM</title>
    <link href="http://yoursite.com/2019/07/13/%E8%81%8A%E4%B8%80%E8%81%8ACGI%E3%80%81FastCGI%E5%8F%8AFPM/"/>
    <id>http://yoursite.com/2019/07/13/聊一聊CGI、FastCGI及FPM/</id>
    <published>2019-07-13T03:40:46.000Z</published>
    <updated>2019-07-13T14:59:59.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGI是什么"><a href="#CGI是什么" class="headerlink" title="CGI是什么"></a>CGI是什么</h2><p>CGI全称通用网关接口。通用网关接口（Common Gateway Interface）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种<code>标准</code>。— 维基百科</p><p>说的简单点，所谓CGI其实就是定义了服务器（如nginx）和处理程序（如PHP）之间该如何进行数据交互的标准。如果没有这个标准，服务器按照自己的方式把数据传给处理程序，那处理程序该如何识别，所以提供了一种各类服务器和各个处理程序都认同的的协议，规定了哪些数据该传递，以什么样的方式传递。</p><p>那所谓的<code>数据</code>，又是什么？</p><p>这里的数据我认为应该分成两部分。第一部分是<strong>入</strong>：服务器传递给处理程序，这个时候会传递如<code>url</code>、<code>request body</code>、<code>request header</code>等信息，PHP解析器(php-cgi)拿到这些信息，进行程序内部的处理。第二部分是<strong>出</strong>：处理程序把响应数据回传给服务器，这个时候的数据就会是<code>response</code>等响应信息、服务器拿到数据后，通过cgi解析，处理完成后，返回给客户端。</p><p>CGI就那么完美吗？</p><p>答案当然是否定的，每一次的web请求，实现了CGI的进程都会fork一个进程进行处理，当请求处理完之后，就要关闭，这样频繁的对进程进行创建销毁，效率低、处理速度慢，而且当连接数一多，过多的进程就会消耗更多的资源和内存。</p><h2 id="FastCGI是什么"><a href="#FastCGI是什么" class="headerlink" title="FastCGI是什么"></a>FastCGI是什么</h2><p>FastCGI从根本上来说其实类似于cgi，也是与语言无关的一种协议。是为了解决cgi的频繁创建销毁造成的资源浪费、才孕育而生了FastCGI。</p><h2 id="FPM又是什么"><a href="#FPM又是什么" class="headerlink" title="FPM又是什么"></a>FPM又是什么</h2><p>FPM或者说是PHP-FPM，官方对FPM的解释是Fastcgi Process Manager（Fastcgi 进程管理器）。在说FPM之前就不得不先说一下，PHP官方推出的php-cgi.</p><p>php-cgi虽然是官方出品，但是当修改php.ini文件后，需要重启php-cgi，而且php-cgi不支持平滑重启。</p><p>PHP-FPM是非官方出品的，是从php5.3之后加入的，它是对FastCGI协议的具体实现，负责一个进程池来管理web服务器的请求。</p><h3 id="CGI、FastCGI、PHP-CGI和PHP-FPM关系图"><a href="#CGI、FastCGI、PHP-CGI和PHP-FPM关系图" class="headerlink" title="CGI、FastCGI、PHP-CGI和PHP-FPM关系图"></a>CGI、FastCGI、PHP-CGI和PHP-FPM关系图</h3><p><img src="/images/3E2DA9B4-80D5-454D-929B-B7D571DCBEBD.jpeg" alt="CGI、FastCGI、PHP-CGI和PHP-FPM关系图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CGI是什么&quot;&gt;&lt;a href=&quot;#CGI是什么&quot; class=&quot;headerlink&quot; title=&quot;CGI是什么&quot;&gt;&lt;/a&gt;CGI是什么&lt;/h2&gt;&lt;p&gt;CGI全称通用网关接口。通用网关接口（Common Gateway Interface）是一种重要的互联网技
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>扬帆 起航！</title>
    <link href="http://yoursite.com/2019/06/23/%E6%89%AC%E5%B8%86%20%E8%B5%B7%E8%88%AA/"/>
    <id>http://yoursite.com/2019/06/23/扬帆 起航/</id>
    <published>2019-06-23T03:22:13.000Z</published>
    <updated>2019-06-23T03:32:04.780Z</updated>
    
    <content type="html"><![CDATA[<p>PHP程序员技术成长规划</p><a id="more"></a><h2 id="第一阶段：基础阶段（基础PHP程序员）"><a href="#第一阶段：基础阶段（基础PHP程序员）" class="headerlink" title="第一阶段：基础阶段（基础PHP程序员）"></a>第一阶段：基础阶段（基础PHP程序员）</h2><p>重点：把LNMP搞熟练（核心是安装配置基本操作）</p><p>目标：能够完成基本的LNMP系统安装，简单配置维护；能够做基本的简单系统的PHP开发；能够在PHP中型系统中支持某个PHP功能模块的开发。</p><p>时间：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。</p><p>1.Linux：</p><p>基本命令、操作、启动、基本服务配置（包括rpm安装文件，各种服务配置等）；会写简单的shell脚本和awk/sed 脚本命令等。</p><p>2.Nginx：</p><p>做到能够安装配置nginx+php，知道基本的nginx核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让nginx+php_fpm顺利工作。</p><p>3.MySQL：</p><p>会自己搭建mysql，知道基本的mysql配置选项；知道innodb和myisam的区别，知道针对InnoDB和MyISAM两个引擎的不同 配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个MySQL数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可 运行的MySQL数据库。</p><p>4.PHP：</p><p>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk图片处理等等；熟悉各种跟MySQL操作链接的api（mysql /mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的PHP框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本MVC的运行机制和为什么这么做，稍微知道不同的PHP框架之间的区别；能够快速学习一个MVC框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。</p><p>5.前端：</p><p>如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么web标准，div+css的web/wap页面模式，知道 HTML5和HTML4的区别；了解一些基本的前端只是和JS框架（jQuery之类的）；了解一些基本的JavaScript编程知识；（本项不是必须 项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）</p><p>6.系统设计：</p><p>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -&gt; Nginx+PHP -&gt; 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；</p><h2 id="第二阶段：提高阶段-（中级PHP程序员）"><a href="#第二阶段：提高阶段-（中级PHP程序员）" class="headerlink" title="第二阶段：提高阶段 （中级PHP程序员）"></a>第二阶段：提高阶段 （中级PHP程序员）</h2><p>重点：提高针对LNMP的技能，能够更全面的对LNMP有熟练的应用。</p><p>目标：能够随时随地搭建好LNMP环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；</p><ol><li>Linux: </li></ol><p>在第一阶段的基础上面，能够流畅的使用Shell脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数 据统计等工作；基本能够安装大部分非特殊的Linux程序（包括各种库、包、第三方依赖等等，比如MongoDB/Redis/Sphinx /Luncene/SVN之类的）；了解基本的Linux服务，知道如何查看Linux的性能指标数据，知道基本的Linux下面的问题跟踪等。</p><ol start="2"><li>Nginx: </li></ol><p>在第一阶段的基础上面，了解复杂一些的Nginx配置；包括 多核配置、events、proxy_pass，sendfile/tcp_*配置， 知道超时等相关配置和性能影响；知道nginx除了web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的nginx配置调优； 知道如何配置权限、编译一个nginx扩展到nginx；知道基本的nginx运行原理（master/worker机制，epoll），知道为什么 nginx性能比apache性能好等知识；</p><ol start="3"><li>MySQL/MongoDB：</li></ol><p>在第一阶段的基础上面，在MySQL开发方面，掌握很多小技巧，包括常规SQL优化（group by/order by/rand优化等）；除了 能够搭建MySQL，还能够冷热备份MySQL数据，还知道影响innodb/myisam性能的配置选项（比如key_buffer /query_cache/sort_buffer/innodb_buffer_pool_size /innodb_flush_log_at_trx_commit等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如  知道 如何搭建mysql主从同步的环境，知道各个binlog_format的区别；知道MySQL的性能追查，包括slow_log/explain等，还 能够知道基本的索引建立处理等知识；原理方面了解基本的MySQL的架构（Server+存储引擎），知道基本的InnoDB/MyISAM索引存储结构 和不同（聚簇索引，B树）；知道基本的InnoDB事务处理机制；了解大部分MySQL异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情 况，建议了解一下NoSQL的代表MongoDB数据库，顺便对比跟MySQL的差别，同事能够在合适的应用场景安全谨慎的使用MongoDB，知道基本 的PHP与MongoDB的结合开发。</p><ol start="4"><li>Redis/Memcached：</li></ol><p>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道Memcached和Redis的异同和应用场景，能够独立安 装 Redis/Memcached，了解Memcahed的一些基本特性和限制，比如最大的value值，知道PHP跟他们的使用结合；Redis了解 基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解Redis的事务等等。原理部分，能够大概了解Memcached的内存结构 （slab机制），redis就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下Redis 的事务、RDB、AOF等机制更好</p><ol start="5"><li>PHP：</li></ol><p>除了第一阶段的能力，安装配置方面能够随意安装PHP和各种第三方扩展的编译安装配置；了解php-fpm的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout之类的影响性能的配置），知道mod_php /fastcgi的区别；在PHP方面已经能够熟练各种基础技术，还包括各种深入些的PHP，包括对PHP面向对象的深入理解/SPL/语法层面的特殊特 性比如反射之类的；在框架方面已经阅读过最少一个以上常规PHP MVC框架的代码了，知道基本PHP框架内部实现机制和设计思想；在PHP开发中已经能 够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的PHP MVC框架来充分让开发自由化， 让自己深入理解MVC模式，也让自己能够在业务项目开发里快速升级；熟悉PHP的各种代码优化方法，熟悉大部分PHP安全方面问题的解决处理；熟悉基本的 PHP执行的机制原理（Zend引擎/扩展基本工作机制）；</p><ol start="6"><li>C/C++： </li></ol><p>开始涉猎一定的C/C++语言，能够写基本的C/C++代码，对基本的C/C++语法熟悉（指针、数组操作、字符串、常规标准API）和数据结构 （链表、树、哈希、队列）有一定的熟悉下；对Linux下面的C语言开发有基本的了解概念，会简单的makefile文件编写，能够使用简单的 GCC/GDB的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）</p><ol start="7"><li>前端：</li></ol><p>在第一阶段的基础上面，熟悉基本的HTTP协议（协议代码200/300/400/500，基本的HTTP交互头）；条件允许，可以在深入写出稍微 优雅的HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS /BootStrap之类）；如果条件允许，可以深入学习JavaScript编程，比如闭包机制、DOM处理；再深入些可以读读jQuery源码做深入 学习。（本项不做重点学习，除非对前端有兴趣）</p><ol start="8"><li>系统设计：</li></ol><p>能够设计大部分中型系统的网站架构、数据库、基本PHP框架选型；性能测试排查处理等；能够完成类似：浏览 器 -&gt; CDN(Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；能够支撑 每天数百万到千万流量基本网站的开发维护工作；</p><h2 id="第三阶段：高级阶段-（高级PHP程序员）"><a href="#第三阶段：高级阶段-（高级PHP程序员）" class="headerlink" title="第三阶段：高级阶段 （高级PHP程序员）"></a>第三阶段：高级阶段 （高级PHP程序员）</h2><p>重点：除了基本的LNMP程序，还能够在某个方向或领域有深入学习。（纵深维度发展）</p><p>目标：除了能够完成基本的PHP业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立hold深入某个技术方向，在这块比较专业。（比如在MySQL、Nginx、PHP、Redis等等任一方向深入研究）</p><ol><li>Linux：</li></ol><p>除了第二阶段的能力，在Linux下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump /starce/ldd/ar等)；在shell脚本方面，已经能够编写比较复杂的shell脚本（超过500行）来协助完成很多包括备份、自动化处理、 监控等工作的shell；对awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对Linux内部机制 有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如NFS、磁盘管理等等；</p><ol start="2"><li>Nginx: </li></ol><p>在第二阶段的基础上面，已经能够把Nginx操作的很熟练，能够对Nginx进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人 兴趣，更多方面可以考虑侧重在关于Nginx工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的master/worker工作机 制，Nginx内部的事件处理，内存管理等等；同时可以学习Nginx扩展的开发，可以定制一些自己私有的扩展；同时可以对Nginx+Lua有一定程度 的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对Nginx原理的深入理解，可以考虑成为Nginx方向的深入专业者。</p><ol start="3"><li>MySQL/MongoDB：</li></ol><p>在第二阶段的基础上面，在MySQL应用方面，除了之前的基本SQL优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的 更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的MySQL的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房 同步数据方案、MySQL高可用架构等都有涉及了解；对MySQL应用层面，对MySQL的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触 发器、分区等技术有一定了解和应用；对MySQL性能方面，有包括磁盘优化（SAS迁移到SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其 他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache /thread_cache_size/innodb_lock_wait_timeout等）、连接池软件选择应用，对show * （show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL备份技术的深入熟悉，包括灾备 还原、对Binlog的深入理解，冷热备份，多IDC备份等；在MySQL原理方面，有更多了解，比如对MySQL的工作机制开始阅读部分源码，比如对主 从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考CSV引擎 开发自己简单的存储引擎来保存一些数据，增强对MySQL的理解；在这个过程，如果自己有兴趣，也可以考虑往DBA方向发展。MongoDB层面，可以考 虑比如说在写少读多的情况开始在线上应用MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS和NoSQL的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下MongoDB的工作机制。</p><ol start="4"><li>Redis/Memcached：</li></ol><p>在第二阶段的基础上面，能够更深入的应用和学习。因为Memcached不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理 解；Redis部分，可以多做一些复杂的数据结构的应用（zset来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof等同步机制的学习应用，设计一个高可用的Redis应用架构和集群；建议可以深入的学习一下Redis的源码，把在第二阶段积累的知识都可以应用 上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个Redis方面非常专业的使用者。</p><ol start="5"><li>PHP：</li></ol><p>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在PHP开发中遇到95%的问题，了解 大部分PHP的技巧；对大部分的PHP框架能够迅速在一天内上手使用，并且了解各个主流PHP框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方 面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括 扩展中的一些复杂高级配置和原理（比如memcached扩展配置中的memcache.hash_strategy、apc扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection之类的）；对php的 工作机制比较了解，包括php-fpm工作机制（比如php-fpm在不同配置机器下面开启进程数量计算以及原理），对zend引擎有基本熟悉 （vm/gc/stream处理），阅读过基本的PHP内核源码（或者阅读过相关文章），对PHP内部机制的大部分核心数据结构（基础类型/Array /Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的PHP扩展开发，了解一些扩展开发 的中高级知识（minit/rinit等），熟悉php跟apache/nginx不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP扩展，可以考虑学习开发Zend扩展，从更底层去了解PHP。</p><ol start="6"><li>C/C++：</li></ol><p>在第二阶段基础上面，能够在C/C++语言方面有更深入的学习了解，能够完成中小型C/C++系统的开发工作；除了基本第二阶段的基础C/C++语 法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree等）方便在特殊工作 中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）； 多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络IO模型的 差别和选型，熟悉不同异步网络IO模型的原理和差异（select/poll/epoll/iocp等），并且熟悉常见的异步框架（ACE/ICE /libev/libevent/libuv/Boost.ASIO等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如muduo）；同时能够设 计好的高并发程序架构（leader-follow/master-worker等）；了解大部分C/C++后端Server开发中的问题（内存管理、日 志打印、高并发、前后端通信协议、服务监控），知道各个后端服务RPC通信问题（struct/http/thirft/protobuf等）；能够更熟 络的使用GCC和GDB来开发编译调试程序，在线上程序core掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库 （比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追bug；</p><ol start="7"><li>前端：</li></ol><p>深入了解HTTP协议（包括各个细致协议特殊协议代码和背后原因，比如302静态文件缓存了，502是nginx后面php挂了之类的）；除了之前 的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似jQuery的前端框架，或者开发一个富文本 编辑器之类的比较琐碎考验JavaScript功力；</p><ol start="8"><li>其他领域语言学习：</li></ol><p>在基础的PHP/C/C++语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python /Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java /Golang，数据统计分析可以了解了解R语言，如果想换个视角做后端业务，可以试试 Node.js还有前面提到的跟Nginx结合的 Nginx_Lua等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下 面，Erlang的解决方案简单的惊人；比如在不想选择C/C++的情况下，还有类似高效的Erlang/Golang可用等等；主要是提升视野。</p><ol start="9"><li>其他专业方向学习：</li></ol><p>在本阶段里面，会除了基本的LNMP技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领 域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词 等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发 （Android/IOS）、计算机安全、嵌入式系统、硬件等方向。</p><ol start="10"><li>系统设计：</li></ol><p>系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览 器 -&gt; CDN -&gt; 负载均衡 -&gt;接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据 库 -&gt; 各路复杂后端RPC交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；能够支撑每天数千万到数 亿流量网站的正常开发维护工作。</p><p>原文来自：黑夜路人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP程序员技术成长规划&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
